import org.openhab.core.library.types.*
import org.joda.time.*
	
var Number counter1 = 0
var Number counter2 = 0
var Number counter3 = 0
var Number counter4 = 0
var Number counter5 = 0

var Number lastCheck1 = 0
var Number lastCheck2 = 0
var Number lastCheck3 = 0
var Number lastCheck4 = 0
var Number lastCheck5 = 0

var Number tempMax = 45
var Number tempMin = 10


/* checking at database*/
rule "NO ONE AT HOME AND safetyHouse IS OFF"
    when   
            Item noOneAtHome received update
    then   
    		if(safetyHouse.state != ON && noOneAtHome.state == 1){    			
    			sendCommand(safetyHouse, ON) 
    			sendMail("c.avendano10@gmail.com", "ALERT! Safety House turned ON", "Due nobody is at home the system turned ON the Safety House Mode")
    		}            
    end

/* POWER SAVE MODE: turn off lights after 1 minute without motion*/

rule "corLightOn"
    when   
            Item motion_1 changed from OFF to ON
    then    
    		counter1 = counter1 + 1
         	sendCommand(light_1, ON)          
	end

rule "corLightOff"
    when   
            Time cron "0 * * * * ?"
    then   
    		if(powerSaveMode.state == ON){
    			if(lastCheck1 == counter1) {
                    counter1 = 0
                    lastCheck1 = -1;
                    sendCommand(light_1, OFF)
                    sendCommand(motion_1, OFF)
	            } else {
	                    lastCheck1 = counter1
	            }	
    		}            
    end
    
rule "kitLightOn"
when
Item motion_2 changed from OFF to ON
then
	counter2 = counter2 + 1
	sendCommand(light_2, ON)
	end
	
	rule "kitLightOff"
	when Time cron "0 * * * * ?"
	then 
	if(powerSaveMode.state == ON){
		if(lastCheck2 == counter2){
		counter2= 0
		lastCheck2 = -1
		sendCommand(light_2, OFF)
		sendCommand(motion_2, OFF)
	} else {
		lastCheck2 = counter2
	}
	}
	end

rule "bed1LightOn"
    when   
            Item motion_3 changed from OFF to ON
    then    
    		counter3 = counter3 + 1
         	sendCommand(light_3, ON)          
	end

rule "bed1LightOff"
    when   
            Time cron "0 * * * * ?"
    then   
    		if(powerSaveMode.state == ON){
    			if(lastCheck3 == counter3) {
                    counter3 = 0
                    lastCheck3 = -1;
                    sendCommand(light_3, OFF)
                    sendCommand(motion_3, OFF)
	            } else {
	                    lastCheck3 = counter3
	            }	
    		}            
    end

rule "bathLightOn"
    when   
            Item motion_4 changed from OFF to ON
    then    
    		counter4 = counter4 + 1
         	sendCommand(light_4, ON)          
	end

rule "bathLightOff"
    when   
            Time cron "0 * * * * ?"
    then   
    		if(powerSaveMode.state == ON){
    			if(lastCheck4 == counter4) {
                    counter4 = 0
                    lastCheck4 = -1;
                    sendCommand(light_4, OFF)
                    sendCommand(motion_4, OFF)
	            } else {
	                    lastCheck4 = counter4
	            }	
    		}            
    end
    
    rule "bed2LightOn"
    when   
            Item motion_5 changed from OFF to ON
    then    
    		counter5 = counter5 + 1
         	sendCommand(light_5, ON)          
	end

rule "bed2LightOff"
    when   
            Time cron "0 * * * * ?"
    then   
    		if(powerSaveMode.state == ON){
    			if(lastCheck5 == counter5) {
                    counter5 = 0
                    lastCheck5 = -1;
                    sendCommand(light_5, OFF)
                    sendCommand(motion_5, OFF)
	            } else {
	                    lastCheck5 = counter5
	            }	
    		}            
    end
    
    
/* SAFETY HOUSE HIGH LEVEL GOAL */
rule "Send email when detected a presence"
	when 
		Item Motions changed 
	then
		if(safetyHouse.state == ON){
			
			if(Motions.members.filter(i | i.state == ON).size >0 )
			{
				//Motions.members.forEach(i | say(i))
				if (alarm_presence.state != ON) {
	                alarm_presence.postUpdate(ON)
	            } 									
			}
		}		
				
end

rule "Presence alarm_presence"
    when
        Item alarm_presence received update ON
    then
        // turn on all lights
        sendCommand(Lights,ON)
        
        // send an email
        sendMail("c.avendano10@gmail.com", "Detected a presence", "A presence has been detected. Attached is an image taken by the camera.", "http://localhost/cam/index.jpeg")
    end
    
rule "Presence alarm_fire"
    when
        Item alarm_fire received update ON
    then
        // turn on all lights
        sendCommand(Lights,ON)
        
        // send an email
        sendMail("c.avendano10@gmail.com", "ALERT! The house is burning", "The temperature sensors reported a value above 45 degrees", "http://localhost/cam/fire.jpeg")
    end


rule "close everything when safety option is activated"
    when   
            Item safetyHouse changed from OFF to ON
    then    
         	sendCommand(Doors, OFF)
         	sendCommand(Windows, OFF)
         	sendCommand(Lights, OFF)
         	sendCommand(Motions, OFF)
         	alarm_presence.state = OFF       
	end

/* FRESH HOUSE MODE */

/* 
0 0 0/1 1/1 * ? *
 * */
rule "intense ventilation every hour"
	when
		Time cron "0 * * * * ?"
	then
		if(safetyHouse.state == OFF && keepHouseFresh.state == ON){
		
		var DateTime timeDef1 = new DateTime(now.getYear(), now.getMonthOfYear(), now.getDayOfMonth(), 22, 00, 0)
		var DateTime timeDef2 = new DateTime(now.getYear(), now.getMonthOfYear(), now.getDayOfMonth(), 06, 00, 0)
	
		if(now.isAfter(timeDef2) && now.isBefore(timeDef1))
		{
			logInfo("org.openhab", "intense ventilation for 5 minutes started")
			sendCommand(Windows, ON)
		}	
		}
	end

rule "closing windows after intense ventilation"
when
Time cron "10 0/1 * 1/1 * ? *"
then
	logInfo("org.openhab", "intense ventilation for 5 minutes ended")
	sendCommand(Windows, OFF)
end

/* WARM HOUSE MODE */

rule "close all windows and doors is any temperature is below tempMin"
	when
		Item Temperatures received update 
	then
		if(keepHouseWarm.state == ON){
			if(Temperatures.members.filter(i | i.state < tempMin).size > 0){
				sendCommand(Windows, OFF);
				sendCommand(Doors, OFF)
			}			
		}
	end


/* general rules*/

rule "Turn off all lights, motions, doors and windows when the system starts"
	when
		System started
	then 
		sendCommand(Lights, OFF)
		sendCommand(Windows, OFF)
		sendCommand(Motions, OFF)
		sendCommand(Doors, OFF)
		sendCommand(Temperatures, 20)
		alarm_fire.state = OFF  
	end
	
rule "send Email if temperature above tempMax"
when
	Item Temperatures received update
	then
		if(Temperatures.members.filter(i| i.state >tempMax).size > 0){
			if (alarm_fire.state != ON) {
		    	alarm_fire.postUpdate(ON)
		    }
		}		
	end

rule "Turn on a motion sensor when a door_1 is opened."
when
	Item door_1 changed from OFF to ON 
	then
		sendCommand(motion_1,ON)
	end

rule "Turn on a motion sensor when a door_2 is opened."
when
	Item door_2 changed from OFF to ON 
	then
		sendCommand(motion_2,ON)
	end
	
rule "Turn on a motion sensor when a door_3 is opened."
when
	Item door_3 changed from OFF to ON 
	then
		sendCommand(motion_3,ON)
	end
	
rule "Turn on a motion sensor when a door_4 is opened."
when
	Item door_4 changed from OFF to ON 
	then
		sendCommand(motion_4,ON)
	end
	
rule "Turn on a motion sensor when a door_5 is opened."
when
	Item door_5 changed from OFF to ON 
	then
		sendCommand(motion_5,ON)
	end
	